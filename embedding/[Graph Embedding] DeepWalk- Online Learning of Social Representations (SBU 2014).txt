DeepWalk: Online Learning of Social Representations
Bryan Perozzi Stony Brook University Department of Computer Science
Rami Al-Rfou Stony Brook University Department of Computer Science
Steven Skiena Stony Brook University Department of Computer Science
 ABSTRACT
We present DeepWalk, a novel approach for learning la- tent representations of vertices in a network. These latent representations encode social relations in a continuous vector space, which is easily exploited by statistical models. Deep- Walk generalizes recent advancements in language mod- eling and unsupervised feature learning (or deep learning) from sequences of words to graphs.
DeepWalk uses local information obtained from trun- cated random walks to learn latent representations by treat- ing walks as the equivalent of sentences. We demonstrate DeepWalk’s latent representations on several multi-label network classification tasks for social networks such as Blog- Catalog, Flickr, and YouTube. Our results show that Deep- Walk outperforms challenging baselines which are allowed a global view of the network, especially in the presence of missing information. DeepWalk’s representations can pro- vide F1 scores up to 10% higher than competing methods when labeled data is sparse. In some experiments, Deep- Walk’s representations are able to outperform all baseline methods while using 60% less training data.
DeepWalk is also scalable. It is an online learning algo- rithm which builds useful incremental results, and is trivially parallelizable. These qualities make it suitable for a broad class of real world applications such as network classifica- tion, and anomaly detection.
Categories and Subject Descriptors
H.2.8 [Database Management]: Database Applications - Data Mining; I.2.6 [Artificial Intelligence]: Learning; I.5.1 [Pattern Recognition]: Model - Statistical
1. INTRODUCTION
The sparsity of a network representation is both a strength and a weakness. Sparsity enables the design of efficient dis- crete algorithms, but can make it harder to generalize in statistical learning. Machine learning applications in net- works (such as network classification [15, 37], content rec-
⃝c The authors, 2014. This is the author’s draft of the work. It is posted here for your personal use. Not for redistribution. The definitive version was published in KDD’14, http://dx.doi.org/10.1145/2623330. 2623732
12
22
18 17
{bperozzi, ralrfou, skiena}@cs.stonybrook.edu
 27
15 16
23 19
31
10
29 28
26
2
30
21
20
3
11
7
33
24
34
4
9
32
25
5
14
8
(a) Input: Karate Graph
(b) Output: Representation
1
13
6
Figure 1: Our proposed method learns a latent space rep- d
resentation of social interactions in R . The learned rep-
resentation encodes community structure so it can be eas-
ily exploited by standard classification methods. Here, our
method is used on Zachary’s Karate network [44] to gen-
2
ommendation [11], anomaly detection [5], and missing link prediction [22]) must be able to deal with this sparsity in order to survive.
In this paper we introduce deep learning (unsupervised feature learning) [2] techniques, which have proven success- ful in natural language processing, into network analysis for the first time. We develop an algorithm (DeepWalk) that learns social representations of a graph’s vertices, by mod- eling a stream of short random walks. Social representa- tions are latent features of the vertices that capture neigh- borhood similarity and community membership. These la- tent representations encode social relations in a continuous vector space with a relatively small number of dimensions. DeepWalk generalizes neural language models to process a special language composed of a set of randomly-generated walks. These neural language models have been used to capture the semantic and syntactic structure of human lan- guage [6], and even logical analogies [28].
DeepWalk takes a graph as input and produces a la- tent representation as an output. The result of applying our method to the well-studied Karate network is shown in Fig- ure 1. The graph, as typically presented by force-directed layouts, is shown in Figure 1a. Figure 1b shows the output of our method with 2 latent dimensions. Beyond the striking similarity, we note that linearly separable portions of (1b) correspond to clusters found through modularity maximiza- tion in the input graph (1a) (shown as vertex colors).
To demonstrate DeepWalk’s potential in real world sce-
erate a latent representation in R . Note the correspon- dence between community structure in the input graph and the embedding. Vertex colors represent a modularity-based clustering of the input graph.
0.6 0.8 1.0 1.2 1.4 1.6 1.8
2115 23 33
9
428
27 3428 24
30
26 25
32
13
1.0 0.5 0.0 0.5
1.0 1.5 2.0 2.5
14 20 5 1 2128
7 6
1301
161929312 17
11
arXiv:1403.6652v2 [cs.SI] 27 Jun 2014

narios, we evaluate its performance on challenging multi- label network classification problems in large heterogeneous graphs. In the relational classification problem, the links be- tween feature vectors violate the traditional i.i.d. assump- tion. Techniques to address this problem typically use ap- proximate inference techniques [31, 35] to leverage the de- pendency information to improve classification results. We distance ourselves from these approaches by learning label- independent representations of the graph. Our representa- tion quality is not influenced by the choice of labeled ver- tices, so they can be shared among tasks.
DeepWalk outperforms other latent representation meth- ods for creating social dimensions [39,41], especially when labeled nodes are scarce. Strong performance with our rep- resentations is possible with very simple linear classifiers (e.g. logistic regression). Our representations are general, and can be combined with any classification method (in- cluding iterative inference methods). DeepWalk achieves all of that while being an online algorithm that is trivially parallelizable.
Our contributions are as follows:
• We introduce deep learning as a tool to analyze graphs, to build robust representations that are suitable for statistical modeling. DeepWalk learns structural reg- ularities present within short random walks.
• We extensively evaluate our representations on multi- label classification tasks on several social networks. We show significantly increased classification performance in the presence of label sparsity, getting improvements 5%-10% of Micro F1, on the sparsest problems we con- sider. In some cases, DeepWalk’s representations can outperform its competitors even when given 60% less training data.
• We demonstrate the scalability of our algorithm by building representations of web-scale graphs, (such as YouTube) using a parallel implementation. Moreover, we describe the minimal changes necessary to build a streaming version of our approach.
The rest of the paper is arranged as follows. In Sections 2 and 3, we discuss the problem formulation of classification in data networks, and how it relates to our work. In Section 4 we present DeepWalk, our approach for Social Repre- sentation Learning. We outline ours experiments in Section 5, and present their results in Section 6. We close with a discussion of related work in Section 7, and our conclusions.
In the literature, this is known as the relational classifi- cation (or the collective classification problem [37]). Tradi- tional approaches to relational classification pose the prob- lem as an inference in an undirected Markov network, and then use iterative approximate inference algorithms (such as the iterative classification algorithm [31], Gibbs Sam- pling [14], or label relaxation [18]) to compute the posterior distribution of labels given the network structure.
We propose a different approach to capture the network topology information. Instead of mixing the label space as part of the feature space, we propose an unsupervised method which learns features that capture the graph struc- ture independent of the labels’ distribution.
This separation between the structural representation and the labeling task avoids cascading errors, which can occur in iterative methods [33]. Moreover, the same representation can be used for multiple classification problems concerning that network.
Our goal is to learn XE ∈ R|V |×d, where d is small num- ber of latent dimensions. These low-dimensional represen- tations are distributed; meaning each social phenomena is expressed by a subset of the dimensions and each dimension contributes to a subset of the social concepts expressed by the space.
Using these structural features, we will augment the at- tributes space to help the classification decision. These fea- tures are general, and can be used with any classification algorithm (including iterative methods). However, we be- lieve that the greatest utility of these features is their easy integration with simple machine learning algorithms. They scale appropriately in real-world networks, as we will show in Section 6.
3. LEARNING SOCIAL REPRESENTATIONS
We seek learning social representations with the following characteristics:
• Adaptability - Real social networks are constantly evolving; new social relations should not require re- peating the learning process all over again.
• Community aware - The distance between latent dimensions should represent a metric for evaluating social similarity between the corresponding members of the network. This allows generalization in networks with homophily.
• Low dimensional - When labeled data is scarce, low- dimensional models generalize better, and speed up convergence and inference.
• Continuous - We require latent representations to model partial community membership in continuous space. In addition to providing a nuanced view of community membership, a continuous representation has smooth decision boundaries between communities which allows more robust classification.
Our method for satisfying these requirements learns repre- sentation for vertices from a stream of short random walks, using optimization techniques originally designed for lan- guage modeling. Here, we review the basics of both random walks and language modeling, and describe how their com- bination satisfies our requirements.
2.
PROBLEM DEFINITION
We consider the problem of classifying members of a social network into one or more categories. More formally, let G = (V,E), where V are the members of the network, and E be its edges, E ⊆ (V × V ). Given a partially labeled social network GL = (V, E, X, Y ), with attributes X ∈ R|V |×S where S is the size of the feature space for each attribute vector, and Y ∈ R|V |×|Y|, Y is the set of labels.
In a traditional machine learning classification setting, we aim to learn a hypothesis H that maps elements of X to the labels set Y. In our case, we can utilize the significant in- formation about the dependence of the examples embedded in the structure of G to achieve superior performance.

 Frequency of Vertex Occurrence in Short Random Walks
5
10 10 10 10 10 10
 4
3
2
1
0
0123456 10 10 10 10 10 10 10
Vertex visitation count
 Frequency of Word Occurrence in Wikipedia 10
10 10 10 10 10 10
6 5 4 3 2 1 0
 01234567 10 10 10 10 10 10 10 10
Word mention count
(a) YouTube Social Graph
(b) Wikipedia Article Text
The goal of language modeling is estimate the likelihood of a specific sequence of words appearing in a corpus. More formally, given a sequence of words
W 1n = ( w 0 , w 1 , · · · , w n )
where wi ∈ V (V is the vocabulary), we would like to maxi- mize the Pr(wn|w0, w1, · · · , wn−1) over all the training cor- pus.
Recent work in representation learning has focused on us- ing probabilistic neural networks to build general representa- tions of words which extend the scope of language modeling beyond its original goals.
In this work, we present a generalization of language mod- eling to explore the graph through a stream of short random walks. These walks can be thought of short sentences and phrases in a special language. The direct analog is to es- timate the likelihood of observing vertex vi given all the previous vertices visited so far in the random walk.
Pr􏰄vi | (v1,v2,··· ,vi−1)􏰅
Our goal is to learn a latent representation, not only a
probability distribution of node co-occurrences, and so we
|V |×d
Pr 􏰆vi | 􏰄Φ(v1), Φ(v2), · · · , Φ(vi−1)􏰅􏰇 (1)
However as the walk length grows, computing this objec- tive function becomes unfeasible.
A recent relaxation in language modeling [26, 27] turns the prediction problem on its head. First, instead of using the context to predict a missing word, it uses one word to predict the context. Secondly, the context is composed of the words appearing to right side of the given word as well as the left side. Finally, it removes the ordering constraint on the problem. Instead, the model is required to maximize the probability of any word appearing in the context without the knowledge of its offset from the given word.
In terms of vertex representation modeling, this yields the optimization problem:
Figure 2: The power-law distribution of vertices appearing in short random walks (2a) follows a power-law, much like the distribution of words in natural language (2b).
3.1 Random Walks
We denote a random walk rooted at vertex vi as Wvi . It is astochasticprocesswithrandomvariablesWv1 ,Wv2 ,...,Wvk
such that Wk+1 is a vertex chosen at random from the neigh- vi
bors of vertex vk. Random walks have been used as a sim- ilarity measure for a variety of problems in content recom- mendation [11] and community detection [1]. They are also the foundation of a class of output sensitive algorithms which use them to compute local community structure information in time sublinear to the size of the input graph [38].
It is this connection to local structure that motivates us to use a stream of short random walks as our basic tool for ex- tracting information from a network. In addition to captur- ing community information, using random walks as the ba- sis for our algorithm gives us two other desirable properties. First, local exploration is easy to parallelize. Several random walkers (in different threads, processes, or machines) can si- multaneously explore different parts of the same graph. Sec- ondly, relying on information obtained from short random walks make it possible to accommodate small changes in the graph structure without the need for global recomputation. We can iteratively update the learned model with new ran- dom walks from the changed region in time sub-linear to the entire graph.
3.2 Connection: Power laws
Having chosen online random walks as our primitive for capturing graph structure, we now need a suitable method to capture this information. If the degree distribution of a connected graph follows a power law (is scale-free), we observe that the frequency which vertices appear in the short random walks will also follow a power-law distribution.
Word frequency in natural language follows a similar dis- tribution, and techniques from language modeling account for this distributional behavior. To emphasize this similar- ity we show two different power-law distributions in Figure 2. The first comes from a series of short random walks on a scale-free graph, and the second comes from the text of 100,000 articles from the English Wikipedia.
A core contribution of our work is the idea that techniques which have been used to model natural language (where the symbol frequency follows a power law distribution (or Zipf’s law)) can be re-purposed to model community structure in networks. We spend the rest of this section reviewing the growing work in language modeling, and transforming it to learn representations of vertices which satisfy our criteria.
3.3 Language Modeling
iii
introduce a mapping function Φ: v ∈ V 􏰃→ R
mapping Φ represents the latent social representation asso- ciated with each vertex v in the graph. (In practice, we represent Φ by a |V | × d matrix of free parameters, which will serve later on as our XE.) The problem then, is to estimate the likelihood:
minimize
Φ
􏰄􏰅
−logPr {vi−w,··· ,vi−1,vi+1,··· ,vi+w} | Φ(vi)
(2) We find these relaxations are particularly desirable for so- cial representation learning. First, the order independence assumption better captures a sense of ‘nearness’ that is pro- vided by random walks. Moreover, this relaxation is quite useful for speeding up the training time by building small
models as one vertex is given at a time.
Solving the optimization problem from Eq. 2 builds repre-
sentations that capture the shared similarities in local graph structure between vertices. Vertices which have similar neigh- borhoods will acquire similar representations (encoding co- citation similarity), and allowing generalization on machine learning tasks.
By combining both truncated random walks and neural language models we formulate a method which satisfies all
. This
# of Vertices
# of Words

  Algorithm 1 DeepWalk(G, w, d, γ, t) Input: graph G(V, E)
window size w embedding size d walks per vertex γ walk length t
Output: matrix of vertex representations Φ ∈ R|V |×d 1: Initialization: Sample Φ from U|V |×d
2: Build a binary Tree T from V
3: fori=0toγdo
Algorithm 2 SkipGram(Φ, Wvi , w)
  for each vj ∈ Wvi do
foreachuk ∈Wvi[j−w:j+w]do
J(Φ) = −logPr(uk | Φ(vj)) Φ = Φ − α ∗ ∂J
∂Φ
end for end for
In the inner loop, we iterate over all the vertices of the graph. For each vertex vi we generate a random walk |Wvi | = t, and then use it to update our representations (Line 7). We use the SkipGram algorithm [26] to update these represen- tations in accordance with our objective function in Eq. 2.
4.2.1 SkipGram
SkipGram is a language model that maximizes the co- occurrence probability among the words that appear within a window, w, in a sentence [26].
Algorithm 2 iterates over all possible collocations in ran- dom walk that appear within the window w (lines 1-2). For each, we map each vertex vj to its current representation vector Φ(vj) ∈ Rd (See Figure 3b). Given the representa- tion of vj, we would like to maximize the probability of its neighbors in the walk (line 3). We can learn such posterior distribution using several choices of classifiers. For exam- ple, modeling the previous problem using logistic regression would result in a huge number of labels that is equal to |V | which could be in millions or billions. Such models require large amount of computational resources that could span a whole cluster of computers [3]. To speed the training time, Hierarchical Softmax [29,30] can be used to approximate the probability distribution.
4.2.2 Hierarchical Softmax
Given that uk ∈ V , calculating Pr(uk | Φ(vj )) in line 3 is not feasible. Computing the partition function (normal- ization factor) is expensive. If we assign the vertices to the leaves of a binary tree, the prediction problem turns into maximizing the probability of a specific path in the tree (See Figure 3c). If the path to vertex uk is identified by
1: 2: 3: 4: 5: 6:
 O = Shuffle(V ) foreachvi ∈Odo
4:
5:
6:
7:
8:
9: end for
Wvi = RandomWalk(G,vi,t)
SkipGram(Φ, Wvi , w) end for
 of our desired properties. This method generates represen- tations of social networks that are low-dimensional, and ex- ist in a continuous vector space. Its representations encode latent forms of community membership, and because the method outputs useful intermediate representations, it can adapt to changing network topology.
4. METHOD
In this section we discuss the main components of our algorithm. We also present several variants of our approach and discuss their merits.
4.1 Overview
As in any language modeling algorithm, the only required input is a corpus and a vocabulary V. DeepWalk considers a set of short truncated random walks its own corpus, and the graph vertices as its own vocabulary (V = V ). While it is beneficial to know the V and the frequency distribution of vertices in the random walks ahead of the training, it is not necessary for the algorithm to work as we will show in 4.2.2.
4.2 Algorithm: DeepWalk
The algorithm consists of two main components; first a random walk generator and second an update procedure.
The random walk generator takes a graph G and samples uniformly a random vertex vi as the root of the random walk Wvi. A walk samples uniformly from the neighbors of the last vertex visited until the maximum length (t) is reached. While we set the length of our random walks in the experiments to be fixed, there is no restriction for the random walks to be of the same length. These walks could have restarts (i.e. a teleport probability of returning back to their root), but our preliminary results did not show any advantage of using restarts. In practice, our implementation specifies a number of random walks γ of length t to start at each vertex.
Lines 3-9 in Algorithm 1 shows the core of our approach. The outer loop specifies the number of times, γ, which we should start random walks at each vertex. We think of each iteration as making a ‘pass’ over the data and sample one walk per node during this pass. At the start of each pass we generate a random ordering to traverse the vertices. This is not strictly required, but is well-known to speed up the convergence of stochastic gradient descent.
a sequence of tree nodes (b0, b1, . . . , b⌈log |V |⌉), (b0 =
root,
b⌈log |V |⌉ =
uk ) then
Pr(uk | Φ(vj)) =
⌈log |V |⌉
􏰀 Pr(bl | Φ(vj)) l=1
Now, Pr(bl | Φ(vj )) could be modeled by a binary classifier that is assigned to the parent of the node bl. This reduces the computational complexity of calculating Pr(uk | Φ(vj )) from O(|V |) to O(log |V |).
We can speed up the training process further, by assigning shorter paths to the frequent vertices in the random walks. Huffman coding is used to reduce the access time of frequent elements in the tree.
4.2.3 Optimization
The model parameter set is {Φ, T } where the size of each is O(d|V |). Stochastic gradient descent (SGD) [4] is used to optimize these parameters (Line 4, Algorithm 2). The derivatives are estimated using the back-propagation algo- rithm. The learning rate α for SGD is initially set to 2.5% at the beginning of the training and then decreased linearly

             (a) Random walk generation. (b) Representation mapping. (c) Hierarchical Softmax.
Figure 3: Overview of DeepWalk. We slide a window of length 2w + 1 over the random walk Wv4 , mapping the central vertex v1 to its representation Φ(v1). Hierarchical Softmax factors out Pr(v3 | Φ(v1)) and Pr(v5 | Φ(v1)) over sequences of probability distributions corresponding to the paths starting at the root and ending at v3 and v5. The representation Φ is updated to maximize the probability of v1 co-occurring with its context {v3,v5}.
   BlogCatalog Flickr
       0
2
-1
2
-2
2
-3
      2
2222
  0123 # of Workers
   BlogCatalog Flickr
       0.02 0.01 0.00 0.01 0.02
     0123 2222
# of Workers
with the number of vertices that are seen so far.
4.3 Parallelizability
As shown in Figure 2 the frequency distribution of vertices in random walks of social network and words in a language both follow a power law. This results in a long tail of infre- quent vertices, therefore, the updates that affect Φ will be sparse in nature. This allows us to use asynchronous version of stochastic gradient descent (ASGD), in the multi-worker case. Given that our updates are sparse and we do not ac- quire a lock to access the model shared parameters, ASGD will achieve an optimal rate of convergence [36]. While we run experiments on one machine using multiple threads, it has been demonstrated that this technique is highly scal- able, and can be used in very large scale machine learn- ing [8]. Figure 4 presents the effects of parallelizing Deep- Walk. It shows the speed up in processing BlogCatalog and Flickr networks is consistent as we increase the num- ber of workers to 8 (Figure 4a). It also shows that there is no loss of predictive performance relative to the running DeepWalk serially (Figure 4b).
4.4 Algorithm Variants
Here we discuss some variants of our proposed method, which we believe may be of interest.
4.4.1 Streaming
One interesting variant of this method is a streaming ap- proach, which could be implemented without knowledge of the entire graph. In this variant small walks from the graph are passed directly to the representation learning code, and the model is updated directly. Some modifications to the learning process will also be necessary. First, using a de- caying learning rate will no longer be possible. Instead, we can initialize the learning rate α to a small constant value. This will take longer to learn, but may be worth it in some applications. Second, we cannot necessarily build a tree of parameters any more. If the cardinality of V is known (or can be bounded), we can build the Hierarchical Softmax tree for that maximum value. Vertices can be assigned to one of the remaining leaves when they are first seen. If we have the ability to estimate the vertex frequency a priori, we can
(a) Running Time
(b) Performance
Figure 4: Effects of parallelizing DeepWalk
also still use Huffman coding to decrease frequent element
access times.
4.4.2 Non-random walks
Some graphs are created as a by-product of agents inter- acting with a sequence of elements (e.g. users’ navigation of pages on a website). When a graph is created by such a stream of non-random walks, we can use this process to feed the modeling phase directly. Graphs sampled in this way will not only capture information related to network structure, but also to the frequency at which paths are traversed.
In our view, this variant also encompasses language mod- eling. Sentences can be viewed as purposed walks through an appropriately designed language network, and language models like SkipGram are designed to capture this behavior.
This approach can be combined with the streaming vari- ant (Section 4.4.1) to train features on a continually evolv- ing network without ever explicitly constructing the entire graph. Maintaining representations with this technique could enable web-scale classification without the hassles of dealing with a web-scale graph.
5. EXPERIMENTAL DESIGN
In this section we provide an overview of the datasets and methods which we will use in our experiments. Code and data to reproduce our results will be available at the first author’s website.
5.1 Datasets
Relative Time
Relative Change in Micro F1

Name
|V | |E | |Y| Labels
BlogCatalog
10,312 333,983 39 Interests
Flickr
80,513 5,899,882 195 Groups
YouTube
1,138,499 2,990,443 47 Groups
6.1 Multi-Label Classification
To facilitate the comparison between our method and the relevant baselines, we use the exact same datasets and exper- imental procedure as in [39,40]. Specifically, we randomly sample a portion (TR) of the labeled nodes, and use them as training data. The rest of the nodes are used as test. We repeat this process 10 times, and report the average per- formance in terms of both Macro-F1 and Micro-F1. When possible we report the original results [39,40] here directly.
For all models we use a one-vs-rest logistic regression im- plemented by LibLinear [10] for classification. We present results for DeepWalk with (γ = 80, w = 10, d = 128). The results for (SpectralClustering, Modularity, EdgeCluster) use Tang and Liu’s preferred dimensionality, d = 500.
6.1.1 BlogCatalog
In this experiment we increase the training ratio (TR) on the BlogCatalog network from 10% to 90%. Our results are presented in Table 2. Numbers in bold represent the highest performance in each column.
DeepWalk performs consistently better than EdgeCluster, Modularity, and wvRN. In fact, when trained with only 20% of the nodes labeled, DeepWalk performs better than these approaches when they are given 90% of the data. The perfor- mance of SpectralClustering proves much more competitive, but DeepWalk still outperforms when labeled data is sparse on both Macro-F1 (TR ≤ 20%) and Micro-F1 (TR ≤ 60%).
This strong performance when only small fractions of the graph are labeled is a core strength of our approach. In the following experiments, we investigate the performance of our representations on even more sparsely labeled graphs.
6.1.2 Flickr
In this experiment we vary the training ratio (TR) on the Flickr network from 1% to 10%. This corresponds to hav- ing approximately 800 to 8,000 nodes labeled for classifi- cation in the entire network. Table 3 presents our results, which are consistent with the previous experiment. Deep- Walk outperforms all baselines by at least 3% with respect to Micro-F1. Additionally, its Micro-F1 performance when only 3% of the graph is labeled beats all other methods even when they have been given 10% of the data. In other words, DeepWalk can outperform the baselines with 60% less training data. It also performs quite well in Macro-F1, initially performing close to SpectralClustering, but distanc- ing itself to a 1% improvement.
6.1.3 YouTube
The YouTube network is considerably larger than the previous ones we have experimented on, and its size pre- vents two of our baseline methods (SpectralClustering and Modularity) from running on it. It is much closer to a real world graph than those we have previously considered.
The results of varying the training ratio (TR) from 1% to 10% are presented in Table 4. They show that DeepWalk significantly outperforms the scalable baseline for creating graph representations, EdgeCluster. When 1% of the la- beled nodes are used for test, the Micro-F1 improves by 14%. The Macro-F1 shows a corresponding 10% increase. This lead narrows as the training data increases, but Deep- Walk ends with a 3% lead in Micro-F1, and an impressive 5% improvement in Macro-F1 .
This experiment showcases the performance benefits that
 Table 1: Graphs used in our experiments.
An overview of the graphs we consider in our experiments is given in Figure 1.
• BlogCatalog [39] is a network of social relationships provided by blogger authors. The labels represent the topic categories provided by the authors.
• Flickr [39] is a network of the contacts between users of the photo sharing website. The labels represent the interest groups of the users such as ‘black and white photos ’.
• YouTube [40] is a social network between users of the popular video sharing website. The labels here represent groups of viewers that enjoy common video genres (e.g. anime and wrestling).
5.2 Baseline Methods
To validate the performance of our approach we compare it against a number of baselines:
• SpectralClustering [41]: This method generates a rep- resentation in Rd from the d-smallest eigenvectors of
􏰈
eigenvectors of L implicitly assumes that graph cuts will be useful for classification.
• Modularity [39]: This method generates a representa- tion in Rd from the top-d eigenvectors of B, the Mod- ularity matrix of G. The eigenvectors of B encode information about modular graph partitions of G [34]. Using them as features assumes that modular graph partitions will be useful for classification.
• EdgeCluster [40]: This method uses k-means cluster- ing to cluster the adjacency matrix of G. Its has been shown to perform comparably to the Modularity method, with the added advantage of scaling to graphs which are too large for spectral decomposition.
• wvRN [24]: The weighted-vote Relational Neighbor is
a relational classifier. Given the neighborhood Ni of
vertex vi, wvRN estimates Pr(yi|Ni) with the (appro-
priately normalized) weighted mean of its neighbors
(i.e Pr(yi|Ni) = 1 􏰁 wij Pr(yj | Nj )). It has Z vj∈Ni
shown surprisingly good performance in real networks, and has been advocated as a sensible relational classi- fication baseline [25].
• Majority: This na ̈ıve method simply chooses the most frequent labels in the training set.
6. EXPERIMENTS
In this section we present an experimental analysis of our method. We thoroughly evaluate it on a number of multi- label classification tasks, and analyze its sensitivity across several parameters.
L, the normalized graph Laplacian of G. Utilizing the 􏰈

Micro-F1(%)
Macro-F1(%)
SpectralClustering EdgeCluster Modularity
wvRN
Ma jority
31.06 27.94 27.35 19.51 16.51
34.95 37.27 38.93 30.76 31.85 32.99 30.74 31.77 32.97 24.34 25.62 28.82 16.66 16.61 16.70
39.97 40.99 34.12 35.00 34.09 36.13 30.37 31.81 16.91 16.99
41.66
34.63 36.08 32.19 16.92
42.42
35.99 37.23 33.33 16.49
42.62
36.29 38.18 34.28 17.26
% Labeled Nodes
10%
20% 30% 40%
50% 60%
70%
80%
90%
   DeepWalk
 36.00
 38.20
 39.60
 40.30
 41.00
 41.30
 41.50
 41.50
 42.00
   DeepWalk
 21.30
 23.80
 25.30
 26.30
 27.30
 27.60
 27.90
 28.20
 28.90
SpectralClustering EdgeCluster
Modularity
wvRN 6.25 Ma jority 2.52
23.57 19.16 20.00 10.13
25.97 27.46 28.31 29.46 30.13 31.38 31.78
19.14 16.16 17.36
20.48 22.00 20.80 21.85 11.64 14.24
23.00 23.64 22.65 23.41 15.86 17.18
23.82 23.89 17.98
2.61
8%
34.81 31.76 28.89 21.25 16.62
23.36 20.18 17.1 6.59 0.47
24.61 24.20 18.86
2.48
9%
35.14 32.19 29.17 22.51 16.67
23.82 20.78 17.14
8.00 0.47
24.92 24.97 19.57
2.62
10%
35.41 32.84 29.2 22.73 16.71
24.05 20.85 17.12
7.26 0.47
2.55
Table 2: Multi-label classification
2.58 2.63
% Labeled Nodes
SpectralClustering EdgeCluster Modularity
wvRN
Ma jority
SpectralClustering EdgeCluster
Modularity
wvRN 1.53 Ma jority 0.45
2.52 2.58
results in BlogCatalog
   DeepWalk
 32.4
 34.6
 35.9
 36.7
 37.2
 37.7
 38.1
 38.3
 38.5
 38.7
Micro-F1(%)
Macro-F1(%)
1%
27.43 25.75 22.75
17.7 16.34
2% 3%
30.11 31.63 28.53 29.14 25.29 27.3 14.43 15.72 16.31 16.34
17.49 19.44 14.10 15.91 13.37 15.24
2.46 2.91 0.44 0.45
4%
32.69 30.31 27.6 20.97 16.46
20.75 16.72 15.11
3.47 0.46
5%
33.31 30.85 28.05 19.83 16.65
21.60 18.01 16.14
4.95 0.47
6% 7%
33.95 34.46 31.53 31.75 29.33 29.43 19.42 19.22 16.44 16.38
22.36 23.01 18.54 19.54 16.64 17.02
5.56 5.82 0.44 0.45
Flickr
   DeepWalk
 14.0
 17.3
 19.6
 21.1
 22.1
 22.9
 23.6
 24.1
 24.6
 25.0
Micro-F1(%)
Macro-F1(%)
38.63
wvRN 26.79 29.18 33.1 32.88 35.76 37.38 38.21 37.75 Ma jority 24.90 24.84 25.25 25.23 25.22 25.33 25.31 25.34
SpectralClustering — — — — — — — —
EdgeCluster 19.48 25.01 28.15 29.17 29.82 30.65 30.75 31.23
Modularity —————————— wvRN 13.15 15.78 19.66 20.9 23.31 25.43 27.08 26.48 28.33 28.89 Majority 6.12 5.86 6.21 6.1 6.07 6.19 6.17 6.16 6.18 6.19
Table 4: Multi-label classification results in YouTube
13.84 10.52 10.21
Table 3: Multi-label classification results in
% Labeled Nodes 1% 2% 3% 4% 5% 6% 7%
SpectralClustering — — — — —
EdgeCluster 23.90 31.68 35.53 36.76 37.81
Modularity ——————————
— —
— — —
8%
9% 10%
   DeepWalk
 37.95
 39.28
 40.08
 40.78
 41.32
 41.72
 42.12
 42.48
 42.78
 43.05
38.94 39.46 39.92 40.07
38.68 39.42 25.38 25.38
   DeepWalk
 29.22
 31.83
 33.06
 33.90
 34.35
 34.66
 34.96
 35.22
 35.42
 35.67
— —
31.45 31.54

                                                                                             0.38 0.36 0.34 0.32 0.30
                      45678 22222
d
Training
0.01 0.05
0.02 0.09
(a1) Flickr, γ = 30
(a3) BlogCatalog, γ = 30
(a) Stability over dimensions, d
(a2) Flickr, TR = 0.05
(b1) Flickr, TR = 0.05
(b3) BlogCatalog, TR = 0.5
(a) Stability over number of walks, γ
0.45 0.40 0.35 0.30 0.25 0.20 0.15
(b2) Flickr, d = 128
Training
0.1 0.5
0.2 0.9
                                                            can occur from using social representation learning for multi- label classification. DeepWalk, can scale to large graphs, and performs exceedingly well in such a sparsely labeled environment.
6.2 Parameter Sensitivity
In order to evaluate how changes to the parameterization of DeepWalk effect its performance on classification tasks, we conducted experiments on two multi-label classifications tasks (Flickr, and BlogCatalog). For this test, we have fixed the window size and the walk length to sensible val- ues (w = 10,t = 40) which should emphasize local struc- ture. We then vary the number of latent dimensions (d), the number of walks started per vertex (γ), and the amount of training data available (TR) to determine their impact on the network classification performance.
6.2.1 Effect of Dimensionality
Figure 5a shows the effects of increasing the number of latent dimensions available to our model.
Figures 5a1 and 5a3 examine the effects of varying the dimensionality and training rate. The performance is quite consistent between both Flickr and BlogCatalog and show that the optimal dimensionality for a model is depen- dent on the number of training examples. (Note that 1% of Flickr has approximately as many labeled examples as 10% of BlogCatalog).
Figures 5a2 and 5a3 examine the effects of varying the dimensionality and number of walks per vertex. The rel- ative performance between dimensions is relatively stable across different values of γ. These charts have two inter- esting observations. The first is that there is most of the benefit is accomplished by starting γ = 30 walks per node in both graphs. The second is that the relative difference between different values of γ is quite consistent between the two graphs. Flickr has an order of magnitude more edges than BlogCatalog, and we find this behavior interesting.
These experiments show that our method can make use- ful models of various sizes. They also show that the per- formance of the model depends on the number of random
walks it has seen, and the appropriate dimensionality of the model depends on the training examples available.
6.2.2 Effect of sampling frequency
Figure 5a shows the effects of increasing γ, the number of random walks that we start from each vertex.
The results are very consistent for different dimensions (Fig. 5b1, Fig. 5b3) and the amount of training data (Fig. 5b2, Fig. 5b4). Initially, increasing γ has a big effect in the results, but this effect quickly slows (γ > 10). These results demonstrate that we are able to learn meaningful latent representations for vertices after only a small number of random walks.
7. RELATED WORK
The main differences between our proposed method and previous work can be summarized as follows:
1. We learn our latent social representations, instead of computing statistics related to centrality [12] or parti- tioning [41].
2. We do not attempt to extend the classification proce- dure itself (through collective inference [37] or graph kernels [20]).
3. We propose a scalable online method which uses only local information. Most methods require global infor- mation and are offline [16,39–41].
4. We apply unsupervised representation learning to graphs.
In this section we discuss related work in network classifica- tion and unsupervised feature learning.
7.1 Relational Learning
Relational classification (or collective classification) meth- ods [14,24,31,35] use links between data items as part of the classification process. Exact inference in the collective clas- sification problem is NP-hard, and solutions have focused on the use of approximate inference algorithm which may not be guaranteed to converge [37].
0.35
0.30
0.25
45678 22222
d
(a4) BlogCatalog, TR = 0.5
(b4) BlogCatalog, d = 128
γ
1
3
10
30 50 90
Figure 5: Parameter Sensitivity Study
0.35
0.30
0.25
01234567 22222222
γ
0.40
    0.42 0.40 0.38 0.36 0.34 0.32
45678 22222
d
Training
0.1 0.5
0.2 0.9
0.45 0.40 0.35 0.30 0.25 0.20 0.15
 45678 22222
d
γ
1 3
10
30 50
90
01234567 22222222
γ
16 32 64
128 256
16 32 64
128 256
d
d
0.35
0.30
0.25
01234567 22222222
γ
01234567 22222222
γ
Traini
ng
0.01 0.05
0.02 0.09
 0.45 0.40 0.35 0.30 0.25 0.20 0.15
Micro F1
Micro F1
Micro F1
Micro F1
Micro F1
Micro F1
Micro F1
Micro F1

The most relevant relational classification algorithms to our work incorporate community information by learning clusters [32], by adding edges between nearby nodes [13], by using PageRank [23], or by extending relational classifica- tion to take additional features into account [43]. Our work takes a substantially different approach. Instead of a new approximation inference algorithm, we propose a procedure which learns representations of network structure which can then be used by existing inference procedure (including it- erative ones).
A number of techniques for generating features from graphs have also been proposed [12,16,39–41]. In contrast to these methods, we frame the feature creation procedure as a rep- resentation learning problem.
Graph Kernels [42] have been proposed as a way to use relational data as part of the classification process, but are quite slow unless approximated [19]. Our approach is com- plementary; instead of encoding the structure as part of a kernel function, we learn a representation which allows them to be used directly as features for any classification method.
7.2 Unsupervised Feature Learning
Distributed representations have been proposed to model structural relationship between concepts [17]. These repre- sentations are trained by the back-propagation and gradient descent. Computational costs and numerical instability led to these techniques to be abandoned for almost a decade. Recently, distributed computing allowed for larger models to be trained [3], and the growth of data for unsupervised learn- ing algorithms to emerge [9]. Distributed representations usually are trained through neural networks, these networks have made advancements in diverse fields such as computer vision [21], speech recognition [7], and natural language pro- cessing [6].
8. CONCLUSIONS
We propose DeepWalk, a novel approach for learning latent social representations of vertices. Using local infor- mation from truncated random walks as input, our method learns a representation which encodes structural regulari- ties. Experiments on a variety of different graphs illustrate the effectiveness of our approach on challenging multi-label classification tasks.
As an online algorithm, DeepWalk is also scalable. Our results show that we can create meaningful representations for graphs too large to run spectral methods on. On such large graphs, our method significantly outperforms other methods designed to operate for sparsity. We also show that our approach is parallelizable, allowing workers to up- date different parts of the model concurrently.
In addition to being effective and scalable, our approach is also an appealing generalization of language modeling. This connection is mutually beneficial. Advances in lan- guage modeling may continue to generate improved latent representations for networks. In our view, language mod- eling is actually sampling from an unobservable language graph. We believe that insights obtained from modeling ob- servable graphs may in turn yield improvements to modeling unobservable ones.
Our future work in the area will focus on investigating this duality further, using our results to improve language modeling, and strengthening the theoretical justifications of the method.

